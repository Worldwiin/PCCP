/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pccp;

import Database.DatabaseConnection;
import java.io.File;
import java.sql.ResultSet;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Vish
 */
public class SettingPassword extends javax.swing.JFrame {

    DatabaseConnection db;

    /**
     * Creates new form SettingPassword
     */
    public SettingPassword() {
        initComponents();
        setLocationRelativeTo(null);
        setInitialValue();
        db = new DatabaseConnection();
        db.dbconnection();
    }

    private void setInitialValue() {
        lblCounter.setText("Count : " + Details.counter);
        if (!Details.username.equals("")) {
            txtUsername.setText(Details.username);
            txtUsername.setEditable(false);
        }
    }

    private boolean verifyUserName(String name) {
        boolean flage = false;
        try {
            String query = "SELECT * FROM UserTable WHERE Username='" + name + "'";
            ResultSet rs = db.getResultSet(query);
            if (rs.next()) {
                flage = true;
            }
        } catch (Exception e) {
        }
        return flage;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnBrowse = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblCounter = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Setting Password", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Bright", 1, 18), new java.awt.Color(255, 0, 255))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jLabel1.setText("User Name");

        txtUsername.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jLabel3.setText("Select Image");

        btnBrowse.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnSubmit.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblCounter.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblCounter.setText("Count : ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(btnBrowse))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(btnSubmit)
                        .addGap(65, 65, 65)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(94, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblCounter)
                .addGap(56, 56, 56))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblCounter)
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btnBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new Registration().setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        if (Details.counter == 3) {
            JOptionPane.showMessageDialog(this, "Password Selection Done Submit it");
            return;
        }
        String username = txtUsername.getText();
        if (username.equals("")) {
            JOptionPane.showMessageDialog(this, "Please Enter Username then Select image");
            txtUsername.grabFocus();
            return;
        }

        if (verifyUserName(username)) {
            JOptionPane.showMessageDialog(this, "This Username is Already available!!");
            txtUsername.setText("");
            txtUsername.grabFocus();
            return;
        }

        Details.username = username;

        JFileChooser fileChooser = new JFileChooser(Details.currentPath);
        fileChooser.setDialogTitle("Select Image File");

        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            Details.currentPath = f.getPath();

            String textPath = f.getAbsolutePath();
            textPath = textPath.trim();
            if (textPath.endsWith(".jpg") || textPath.endsWith(".png") || textPath.endsWith(".gif") || textPath.endsWith(".bmp")) {
                this.dispose();
                new PCCPRegistration(textPath).setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "SELECT (jpg, png, gif, bmp) FILE!!!!");
            }
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        if (Details.counter != 3) {
            JOptionPane.showMessageDialog(this, "First Complete All 3 Levels then Submit");
        } else {
            System.out.println("Password Setting Process Completed");
            storeDetails();

            JOptionPane.showMessageDialog(this, "Password Successfully Saved");

            Details.name = "";
            Details.gender = "Male";
            Details.dob = "";
            Details.city = "";

            Details.username = "";
            Details.counter = 0;

            Details.imageName = new String[3];
            Details.audioName = new String[3];

            Details.positionx1 = new int[3];
            Details.positiony1 = new int[3];
            Details.positionx2 = new int[3];
            Details.positiony2 = new int[3];

            this.dispose();
            new StartPage().setVisible(true);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void storeDetails() {
        try {
            /*-------Directory Creation Part----------*/
            String path = new File(".").getCanonicalPath();
            path = path + File.separator + "LoginDetails" + File.separator;

            String image = path + Details.username + File.separator + "images";
            String audio = path + Details.username + File.separator + "audio";

            new File(image).mkdirs();
            new File(audio).mkdirs();
            /*-------End Directory Creation Part----------*/

            /*-------Store Image----------*/
            String imagelist = storeImages(image);
            /*-------End Store Image----------*/

            /*-------Store Audio----------*/
            String audiolist = storeAudio(audio);
            /*-------End Store Audio----------*/

            /*-------Store in Database----------*/
            storeDetailsInDatabase(imagelist, audiolist);
            /*-------End Store in Database----------*/
        } catch (Exception e) {
        }
    }

    private String storeImages(String imgDir) {
        String imageList = "";
        try {
            imgDir = imgDir + File.separator;
            for (int i = 0; i < Details.imageName.length; i++) {
                int index = Details.imageName[i].lastIndexOf(".");
                String extention = Details.imageName[i].substring(index, Details.imageName[i].length());

                File s = new File(Details.imageName[i]);
                String des = (i + 1) + extention;
                File d = new File(imgDir + des);
                FileUtils.copyFile(s, d);

                imageList = imageList + des + ",";
            }
            imageList = imageList.substring(0, imageList.length() - 1);
        } catch (Exception e) {
        }
        return imageList;
    }

    private String storeAudio(String audDir) {
        String audioList = "";
        try {
            audDir = audDir + File.separator;
            for (int i = 0; i < Details.audioName.length; i++) {
                int index = Details.audioName[i].lastIndexOf(".");
                String extention = Details.audioName[i].substring(index, Details.audioName[i].length());

                File s = new File(Details.audioName[i]);
                String des = (i + 1) + extention;
                File d = new File(audDir + des);
                FileUtils.copyFile(s, d);

                audioList = audioList + des + ",";
            }
            audioList = audioList.substring(0, audioList.length() - 1);
        } catch (Exception e) {
        }
        return audioList;
    }

    private void storeDetailsInDatabase(String imagelist, String audiolist) {
        DatabaseConnection db = new DatabaseConnection();
        db.dbconnection();

        String position = "";

        for (int i = 0; i < Details.positionx1.length; i++) {
            position = position + Details.positionx1[i] + " " + Details.positiony1[i]
                    + " " + Details.positionx2[i] + " " + Details.positiony2[i] + ",";
        }
        position = position.substring(0, position.length() - 1);

        int id = getId();

        String query = "INSERT INTO UserTable VALUES(" + id + " , '" + Details.username + "' , '" + Details.name + "' , '" + Details.dob + "' , '" 
                + Details.gender + "' , '" + Details.city + "' , '" + Details.email + "' , '"  + position + "' , '" + imagelist + "' , '" + audiolist + "')";
        db.getUpdate(query);
    }

    public int getId() {
        int id = 0;
        try {
            String query = "SELECT MAX(ID) AS ID FROM Usertable";
            ResultSet rs = db.getResultSet(query);
            if (rs.next()) {
                if (rs.getString("ID") != null) {
                    id = rs.getInt("ID");
                } else {
                    id = 0;
                }
            }
            id = id + 1;
        } catch (Exception e) {
        }
        return id;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new SettingPassword().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCounter;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}